const WebSocketService = {
  instance: null,

  getInstance() {
    if (!WebSocketService.instance) {
      WebSocketService.instance = this; // Refer to own object
      this.ws = null;
    }
    return WebSocketService.instance;
  },

  connect(url, authToken) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      return; // Already connected
    }

    this.ws = new WebSocket(url);

    this.ws.onopen = () => {
      console.log("Connected to server");
    };

    this.ws.onclose = () => {
      console.log("Disconnected from server");
      this.ws = null; // Clear instance on disconnect
    };

    this.ws.onerror = (error) => {
      console.error("WebSocket error:", error);
    };
  },

  onMessage(callback) {
    if (!this.ws) {
      console.error("WebSocket not connected.");
      return;
    }
    this.ws.onmessage = callback;
  },

  sendMessage(messageData) {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.error("WebSocket connection is not established.");
      return;
    }
    this.ws.send(JSON.stringify(messageData));
  },
};

export default WebSocketService;
